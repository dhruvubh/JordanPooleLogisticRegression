```R
# install necessary packages
install.packages("tidyverse") # for data manipulation and visualization
install.packages("rsample")   # for data splitting
install.packages("caret")     # for training machine learning models
install.packages("rvest")     # for web scraping
install.packages("stringr")   # for string operations
install.packages("hablar")    # for data type conversion

# load the libraries
library(tidyverse) # data manipulation and visualization
library(rsample)   # data splitting
library(caret)     # machine learning tools
library(stringr)   # string operations
library(hablar)    # data type conversion

# list of file paths for Jordan Poole's stats across seasons
file_list <- c("./jordanpoolestats/19-20.csv", 
               "./jordanpoolestats/20-21.csv",
               "./jordanpoolestats/21-22.csv",
               "./jordanpoolestats/22-23.csv",
               "./jordanpoolestats/23-24.csv")

# read csv files into a list
JordanPoole_list <- lapply(file_list, read.csv)

# add season information to each dataset
for (i in 1:length(JordanPoole_list)) {
  season_range <- gsub(".*(\\d{2}-\\d{2})\\.csv", "\\1", basename(file_list[i]))
  start_year <- as.numeric(substr(season_range, 1, 2)) + 2000
  end_year <- as.numeric(substr(season_range, 4, 5)) + 2000
  JordanPoole_list[[i]]$Season <- paste(start_year, end_year, sep = "-")
}

# combine all season data into a single dataframe
JordanPoole <- do.call(rbind, JordanPoole_list)

# remove columns with all missing values
JordanPoole <- JordanPoole %>% select(-which(colSums(is.na(JordanPoole)) == nrow(JordanPoole)))

# filter out rows with invalid game status
JordanPoole <- JordanPoole[!(JordanPoole$GS == "Did Not Play" |
                               JordanPoole$GS == "Did Not Dress" |
                               JordanPoole$GS == "GS" |
                               JordanPoole$GS == "Inactive" |
                               JordanPoole$GS == "Not With Tm"),]

# rename columns for clarity
colnames(JordanPoole)[6] <- "Location"
colnames(JordanPoole)[8] <- "WinLoss"

# recode location into "Home" or "Away"
JordanPoole$Location <- ifelse(JordanPoole$Location == "@", "Away", "Home")

# split "WinLoss" into separate columns
Index <- str_split_fixed(JordanPoole$WinLoss, " ", 2)
JordanPoole <- cbind(JordanPoole, Index)
JordanPoole <- JordanPoole %>% select(-WinLoss)
names(JordanPoole)[names(JordanPoole) == "1"] <- "WinLoss"
JordanPoole <- JordanPoole %>% select(-"2")

# rename game-related columns
names(JordanPoole)[names(JordanPoole) == "Rk"] <- "TmGameSeason"
names(JordanPoole)[names(JordanPoole) == "G"] <- "PlayerGameSeason"

# convert data types for columns
JordanPoole <- JordanPoole %>%
  convert(
    int("TmGameSeason", "PlayerGameSeason", "FG", "FGA", "X3P", "X3PA", "FT", "FTA", "ORB", "DRB", "TRB", "AST", "STL", "BLK", "TOV", "PF", "PTS", "GmSc", "X..."),
    num("FG.", "X3P.", "FT.", "FG.", "FT.", "X3P.", "GmSc"),
    dte("Date"),
    fct("Tm", "Location", "Opp", "WinLoss", "GS")
  )

# create a column to identify double-double performances
JordanPoole$DoubleDouble <- with(JordanPoole, 
                                 (PTS >= 10 & AST >= 10) | 
                                   (PTS >= 10 & TRB >= 10) | 
                                   (PTS >= 10 & BLK >= 10) | 
                                   (PTS >= 10 & STL >= 10) | 
                                   (AST >= 10 & TRB >= 10) | 
                                   (AST >= 10 & BLK >= 10) | 
                                   (AST >= 10 & STL >= 10) | 
                                   (TRB >= 10 & BLK >= 10) | 
                                   (TRB >= 10 & STL >= 10) | 
                                   (BLK >= 10 & STL >= 10)
)

# convert double-double column to logical type
JordanPoole$DoubleDouble <- as.logical(JordanPoole$DoubleDouble)

# split data into training and testing sets
set.seed(123)
JordanPooleSplit <- initial_split(JordanPoole, prop = 0.7, strata = "DoubleDouble")
JordanPooleTrain <- training(JordanPooleSplit)
JordanPooleTest <- testing(JordanPooleSplit)

# further data processing and cleaning for modeling
JordanPoole <- JordanPoole %>%
  select(-FG, -FGA, -FT, -FTA, -ORB, -DRB, -TRB, -AST, -STL, -BLK, -PTS, -GmSc) %>%
  select(-'FG.', -'X3P', -'X3PA', -'X3P.', -'FT.') %>%
  select(-TOV, -PF, -WinLoss) %>%
  select(-Age, -MP,)

# calculate days since last game
JordanPoole <- JordanPoole %>%
  arrange(Date) %>%
  mutate(DaysSinceLastGame = Date - lag(Date))

# add a column to indicate back-to-back games
JordanPoole$BackToBack <- ifelse(JordanPoole$DaysSinceLastGame == 1, TRUE, FALSE)
JordanPoole <- JordanPoole %>%
  select(-Date, -DaysSinceLastGame)

# assign conferences and time zones based on location and opponent
JordanPoole$Conference <- ifelse(JordanPoole$Opp == "ATL", "Eastern",
                                 ifelse(JordanPoole$Opp == "BOS", "Eastern", NA))

JordanPoole$TimeZone <- ifelse(JordanPoole$Location == "Home", "Eastern",
                               ifelse(JordanPoole$Location == "Away" & JordanPoole$Opp == "ATL", "Eastern", 
                                      ifelse(JordanPoole$Location == "Away" & JordanPoole$Opp == "BOS", "Eastern", NA)))

# prepare training data
JordanPooleTrain <- JordanPooleTrain %>%
  arrange(Date)

JordanPooleTrain <- JordanPooleTrain %>%
  mutate(DaysSinceLastGame = as.numeric(Date - lag(Date)))

JordanPooleTrain <- JordanPooleTrain %>%
  mutate(BackToBack = ifelse(DaysSinceLastGame == 1, TRUE, FALSE))

JordanPooleTrain <- JordanPooleTrain %>%
  filter(!is.na(DaysSinceLastGame))

# convert double-double column to factor for modeling
JordanPoole$DoubleDouble <- as.factor(JordanPoole$DoubleDouble)

# create train-test split
set.seed(123)
train_index <- createDataPartition(JordanPoole$DoubleDouble, p = 0.8, list = FALSE)
JordanPooleTrain <- JordanPoole[train_index, ]
JordanPooleTest <- JordanPoole[-train_index, ]

# train logistic regression model using caret
LogisticRegMultiple <- train(
  DoubleDouble ~ TmGameSeason + PlayerGameSeason + GS + BackToBack, 
  data = JordanPooleTrain,
  method = "glm",
  family = binomial(link = "logit"),
  trControl = trainControl(method = "cv", number = 10),
  na.action = na.pass
)

# evaluate the model's accuracy using cross-validation
summary(resamples(list(model = LogisticRegMultiple)))$statistics$Accuracy

# make predictions on the test data
pred_class <- predict(LogisticRegMultiple, JordanPooleTest)

# calculate the confusion matrix to evaluate model performance
confusionMatrix(
  data = relevel(pred_class, ref = "TRUE"), 
  reference = relevel(JordanPooleTest$DoubleDouble, ref = "TRUE")
)
```
